version: '3'

services:
    database:
        image: asbabushkin/flc:database
#        user: $POSTGRES_USER
        environment:
            POSTGRES_DB: $POSTGRES_DB
            POSTGRES_USER: $POSTGRES_USER
            PGUSER: $POSTGRES_USER
            PG_PASSWORD: $POSTGRES_PASSWORD
        volumes:
            - type: volume
              source: catcher_vol
              target: /var/lib/postgresql/data

        healthcheck:
            test: ["CMD-SHELL", "pg_isready -d flight_search -U alex"]
            interval: 3s
            timeout: 5s
            retries: 5

    backend:
        image: asbabushkin/flc:backend
        environment:
            POSTGRES_DB: $POSTGRES_DB
            POSTGRES_USER: $POSTGRES_USER
            POSTGRES_PASSWORD: $POSTGRES_PASSWORD
            HOST: database
            PORT: $PORT
            SECRET_KEY: $SECRET_KEY

        depends_on:
            database:
                condition: service_healthy

    frontend:
        image: asbabushkin/flc:frontend
        ports:
            - 80:80
        volumes:
            - type: bind
#              source: ~/flc/nginx/nginx.conf
#              target: /etc/nginx/conf.d/nginx.conf
              source: ~/Progr/Flight_catcher_web/nginx/nginx.conf
              target: /etc/nginx/conf.d/nginx.conf
              read_only: true
        depends_on:
            database:
                condition: service_healthy
            backend:
                condition: service_started

    parser:
        image: asbabushkin/flc:parser
        environment:
            POSTGRES_DB: $POSTGRES_DB
            POSTGRES_USER: $POSTGRES_USER
            POSTGRES_PASSWORD: $POSTGRES_PASSWORD
            HOST: database
            PORT: $PORT
            TELEGRAM_API: $TELEGRAM_API
            TELEGRAM_HASH: $TELEGRAM_HASH
            TELEGRAM_USER_ID: $TELEGRAM_USER_ID
            TELEGRAM_USER_NAME: $TELEGRAM_USER_NAME

        ports:
            - 8000:8000

        depends_on:
            database:
                condition: service_healthy


#    backend-migrations:
#        image: kcoursedocker/task-9.2-back:latest
#        environment:
#            PG_NAME: todo_list
#            PG_USER: admin
#            PG_PASSWORD: admin
#            PG_HOST: database
#        command: bash -c "make migrate"
#        depends_on:
#            database:
#                condition: service_healthy
#            backend:
#                condition: service_started
#
#    backend-superuser:
#        image: kcoursedocker/task-9.2-back:latest
#        environment:
#            PG_NAME: todo_list
#            PG_USER: admin
#            PG_PASSWORD: admin
#            PG_HOST: database
#            DJANGO_SUPERUSER_USERNAME: admin
#            DJANGO_SUPERUSER_PASSWORD: admin
#            DJANGO_SUPERUSER_EMAIL: admin@admin.com
#        command: bash -c "make create-superuser"
#
#        depends_on:
#            database:
#                condition: service_healthy
#            backend:
#                condition: service_started
#            backend-migrations:
#                condition: service_started

volumes:
  catcher_vol:

